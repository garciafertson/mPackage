#system.file("x", package = "mPackage")
devtools::document()
devtools::document()
devtools::document()
document()
printX()
build()
sessionInfo()
require(matrixStats)
sessionInfo()
document()
devtools::use_package("matrixStats")
suppressMsps2 = c("msp_1974","msp_2153", "msp_0864")
funcMatRData = "j://Deposit/Project/2018_microbiome_atlas/functional.annotation/funcMat.20190808.RData"
load(funcMatRData)
gutKoBestMatRData = "j://Deposit/Project/2018_microbiome_atlas/functional.annotation/gutKoBestMat.1990.RData"
load(gutKoBestMatRData)
koTerms = colnames(gutKoBestMat)
length(koTerms)
funcMat = funcMat[!rownames(funcMat) %in% suppressMsps2, ]
funcMat = funcMat[, colnames(funcMat) %in% koTerms]
dim(funcMat)
mspKoMat = funcMat
system.file(mspKoMat, package="mPackage")
funcJaccMat =  getJaccMat(funcMat)
jacc <- function(x,y) {
prod = sum(x*y)
sumx = sum(x)
sumy = sum(y)
uni  = sumx + sumy - prod
return(prod/uni)
}
jacc_comp = compiler::cmpfun(jacc)
copyLowerToUpper <- function(m) {
m[lower.tri(m)] <- t(m)[lower.tri(m)]
return(m)
}
copyLowerToUpper_comp = compiler::cmpfun(copyLowerToUpper)
getJaccMat <- function(mat) {
jaccMat = matrix(0,dim(mat)[2],dim(mat)[2])
rownames(jaccMat) = colnames(mat)
colnames(jaccMat) = colnames(mat)
combs = t(combn(ncol(mat),2))
jaccs = apply(combs, 1, function(x) jacc_comp(mat[,x[1]], mat[,x[2]]))
jaccMat[combs]=jaccs
diag(jaccMat)=1
jaccMat = copyLowerToUpper_comp(jaccMat)
return(jaccMat)
}
makeJaccNet <- function(jaccMat, cutJacc = 0.5) {
jaccElementsAll = rownames(jaccMat)
jaccTable = melt(jaccMat)
jaccTable = jaccTable[jaccTable[,3] >= cutJacc & jaccTable[,1] != jaccTable[,2], ]
jaccTable[,1]=as.character(jaccTable[,1])
jaccTable[,2]=as.character(jaccTable[,2])
jaccElementsLeft = unique(c(jaccTable[,1], jaccTable[,2]))
jaccElementsExcluded = jaccElementsAll[!jaccElementsAll %in% jaccElementsLeft]
jaccNet = igraph::graph.data.frame(jaccTable[,1:2], directed=F)
jaccNet = igraph::simplify(jaccNet, remove.multiple=T, remove.loops=T)
jaccNet = add_vertices(jaccNet, length(jaccElementsExcluded), attr=list(name=jaccElementsExcluded))
return(jaccNet)
}
makeModuleList <- function(corNet, debug=F) {
fc = igraph::cluster_walktrap(corNet)
cluster = fc$membership
geneCluster = data.frame(gene=V(corNet)$name,
cluster=cluster,
stringsAsFactors=F)
geneClusterList = split.data.frame(geneCluster, geneCluster$cluster)
geneClusterList = lapply(geneClusterList, "[[", "gene")
geneClusterSizes = do.call(c, lapply(geneClusterList, length))
if (debug) {
print("... done")
print(paste("... modularity:", as.character(modularity(fc))))
print(paste("... no. clusters:", as.character(length(geneClusterList))))
print(paste("... no. genes of max cluster:", as.character(sort(geneClusterSizes,T)[1])))
}
return(geneClusterList)
}
dim(mspKoMat)
dim(funcMat)
system.file(mspKoMat, package="mPackage")
??system.file
require(devtools)
system.file(mspKoMat, package="mPackage")
use_data(mspKoMat, internal=T)
use_data(mspKoMat, internal=T, overwrite = T)
mspKoJaccMat =  getJaccMat(mspKoMat)
koTerms[sample(1:length(koTerms), 200)]
koTermsNew = koTerms[sample(1:length(koTerms), 200)]
mspKoMat = mspKoMat[,colnames(mspKoMat) %in% koTermsNew]
dim(mspKoMat)
use_data(mspKoMat, internal=T, overwrite = T)
mspKoModules = makeFuncCluster(mspKoMat)
#' @export
makeFuncCluster <- function(mspKoMat) {
mspKoJaccMat =  getJaccMat(mspKoMat)
mspKoJaccNet = makeJaccNet(mspKoJaccMat)
mspKoModules = makeModuleList(mspKoJaccNet)
return(mspKoModules)
}
mspKoModules = makeFuncCluster(mspKoMat)
makeJaccNet <- function(jaccMat, cutJacc = 0.5) {
jaccElementsAll = rownames(jaccMat)
jaccTable = reshape::melt(jaccMat)
jaccTable = jaccTable[jaccTable[,3] >= cutJacc & jaccTable[,1] != jaccTable[,2], ]
jaccTable[,1]=as.character(jaccTable[,1])
jaccTable[,2]=as.character(jaccTable[,2])
jaccElementsLeft = unique(c(jaccTable[,1], jaccTable[,2]))
jaccElementsExcluded = jaccElementsAll[!jaccElementsAll %in% jaccElementsLeft]
jaccNet = igraph::graph.data.frame(jaccTable[,1:2], directed=F)
jaccNet = igraph::simplify(jaccNet, remove.multiple=T, remove.loops=T)
jaccNet = add_vertices(jaccNet, length(jaccElementsExcluded), attr=list(name=jaccElementsExcluded))
return(jaccNet)
}
#' @export
makeFuncCluster <- function(mspKoMat) {
mspKoJaccMat =  getJaccMat(mspKoMat)
mspKoJaccNet = makeJaccNet(mspKoJaccMat)
mspKoModules = makeModuleList(mspKoJaccNet)
return(mspKoModules)
}
mspKoModules = makeFuncCluster(mspKoMat)
require(reshape)
makeJaccNet <- function(jaccMat, cutJacc = 0.5) {
jaccElementsAll = rownames(jaccMat)
jaccTable = reshape2::melt(jaccMat)
jaccTable = jaccTable[jaccTable[,3] >= cutJacc & jaccTable[,1] != jaccTable[,2], ]
jaccTable[,1]=as.character(jaccTable[,1])
jaccTable[,2]=as.character(jaccTable[,2])
jaccElementsLeft = unique(c(jaccTable[,1], jaccTable[,2]))
jaccElementsExcluded = jaccElementsAll[!jaccElementsAll %in% jaccElementsLeft]
jaccNet = igraph::graph.data.frame(jaccTable[,1:2], directed=F)
jaccNet = igraph::simplify(jaccNet, remove.multiple=T, remove.loops=T)
jaccNet = add_vertices(jaccNet, length(jaccElementsExcluded), attr=list(name=jaccElementsExcluded))
return(jaccNet)
}
mspKoModules = makeFuncCluster(mspKoMat)
??melt
install.packages("reshape2")
sessionInfo()
getEnrichMentGsByList <- function(refGeneSet, targetGenes, debug=F) {
allRefGenes = unique.default(do.call(c, refGeneSet))
if (debug) print(table(targetGenes %in% allRefGenes))
targetGenes = targetGenes[targetGenes %in% allRefGenes]
hyperPs = lapply(refGeneSet, function(currRefGenes) {
hyperP = getHyperP( targetGenes, currRefGenes, allRefGenes, F )
return(hyperP)
})
hyperPs = unlist(hyperPs, use.names = F)
names(hyperPs) = names(refGeneSet)
return(hyperPs)
}
mspKoModules
mspKoModules = makeFuncCluster(mspKoMat)
session_info()
install.packages("igraph")
require(igraph)
session_info()
mspKoModules = makeFuncCluster(mspKoMat)
#set.seed(1)
#koTermsNew = koTerms[sample(1:length(koTerms), 200)]
#mspKoMat = mspKoMat[,colnames(mspKoMat) %in% koTermsNew]
use_data(mspKoMat, internal=T, overwrite = T)
mspKoModules
koDescMapFile = "J:\\Deposit\\Project\\2018_microbiome_atlas\\functional.annotation\\ko_desc_mapping.20190603.RData"
load(koDescMapFile)
#set.seed(1)
#koTermsNew = koTerms[sample(1:length(koTerms), 200)]
#mspKoMat = mspKoMat[,colnames(mspKoMat) %in% koTermsNew]
use_data(mspKoMat, koDescMap, internal=T, overwrite = T)
getDescFromKoTerms <- function(koTerms) {
desc = koDescMap$desc[match(koTerms, koDescMap$KO)]
return(desc)
}
#' @export
checkKoDescriptionFromModules <- function(mspKoModules) {
return(lapply(mspKoModules, getDescFromKoTerms))
}
#' @export
getDescriptionOfKeggOrthologFromModules <- function(mspKoModules) {
return(lapply(mspKoModules, getDescFromKoTerms))
}
mspKoDescModules = getDescriptionOfKeggOrthologFromModules(mspKoDescModules)
mspKoDescModules = getDescriptionOfKeggOrthologFromModules(mspKoModules)
mspKoDescModules
#' @export
getCoveredMspByModules <- function(mspKoModules, mspKoMat, cutRatio=0.75, debug=F) {
mspList = lapply(mspKoModules, function(currFuncs) {
lenCurrFuncs = length(currFuncs)
if (length(currFuncs)==1) {
currMspsByFuncs = mspKoMat[,currFuncs]
} else {
currMspsByFuncs = rowSums(mspKoMat[,currFuncs])
}
currMspsByFuncs = sort(currMspsByFuncs, decreasing = T)
currMspsByFuncs = currMspsByFuncs[currMspsByFuncs>=(lenCurrFuncs*cutRatio)]
return(names(currMspsByFuncs))
})
return(mspList)
}
mspsByModules = getCoveredMspByModules(mspKoModules, mspKoMat)
mspsByModules
gutTaxoRData = ""J:\\Deposit\\Project\\2018_microbiome_atlas\\gutTaxo.RData""
gutTaxoRData = "J:\\Deposit\\Project\\2018_microbiome_atlas\\gutTaxo.RData"
load(gutTaxoRData)
colnames(gutTaxo)
gutTaxoTab =gutTaxo[,c("MSP", "size_gut", "Taxo_level", "species", "genus", "family", "order", "class", "phylum", "superkingdom")]
View(gutTaxo)
gutTaxoTab =gutTaxo[,c("MSP", "size", "Taxo_level", "species", "genus", "family", "order", "class", "phylum", "superkingdom")]
#set.seed(1)
#koTermsNew = koTerms[sample(1:length(koTerms), 200)]
#mspKoMat = mspKoMat[,colnames(mspKoMat) %in% koTermsNew]
use_data(mspKoMat, koDescMap, gutTaxo, internal=T, overwrite = T)
mspsByModules
mspTab =  melt(mspList)
melt(mspsByModules)
require(reshape2)
melt(mspsByModules)
#' @export
getCoveredMspByModules <- function(mspKoModules, mspKoMat, cutRatio=0.75, debug=F) {
mspList = lapply(mspKoModules, function(currFuncs) {
lenCurrFuncs = length(currFuncs)
if (length(currFuncs)==1) {
currMspsByFuncs = mspKoMat[,currFuncs]
} else {
currMspsByFuncs = rowSums(mspKoMat[,currFuncs])
}
currMspsByFuncs = sort(currMspsByFuncs, decreasing = T)
currMspsByFuncs = currMspsByFuncs[currMspsByFuncs>=(lenCurrFuncs*cutRatio)]
return(names(currMspsByFuncs))
})
mspTab =  melt(mspList)[,c(2,1)]
colnames(mspTab) = c("Cluster", "MSP")
mspTab$species = getSpeciesName(mspTab$MSP, gutTaxo)
return(mspTab)
}
mspsByModules = getCoveredMspByModules(mspKoModules, mspKoMat)
getPhylaName <- function(mgsName, taxo) {
phyla = taxo[match(mgsName, rownames(taxo)),"phylum"]
return(phyla)
}
getFamilyName <- function(mgsName, taxo) {
family = taxo[match(mgsName, rownames(taxo)),"family"]
return(family)
}
getClassName <- function(mgsName, taxo) {
class = taxo[match(mgsName, rownames(taxo)),"class"]
return(class)
}
getOrderName <- function(mgsName, taxo) {
order = taxo[match(mgsName, rownames(taxo)),"order"]
return(order)
}
getGenusName <- function(mgsName, taxo) {
genus = taxo[match(mgsName, rownames(taxo)),"genus"]
return(genus)
}
getSpeciesName <- function(mgsName, taxo) {
species = taxo[match(mgsName, rownames(taxo)),"species"]
return(species)
}
getPhylumName <- function(mgsName, taxo) {
phylum = taxo[match(mgsName, rownames(taxo)),"phylum"]
return(phylum)
}
mspByModuleTab = getCoveredMspByModules(mspKoModules, mspKoMat)
View(mspByModuleTab)
session_info()
document()
require(roxygen2)
roxygenise()
save(mspKoMat, file = "./data/mspKoMat.RData")
save(koDescMap, file = "./data/koDescMap.RData")
save(gutTaxo, file = "./data/gutTaxo.RData")
document()
class(gutTaxo)
head(koDescMap)
document()
document()
#set.seed(1)
#koTermsNew = koTerms[sample(1:length(koTerms), 200)]
#mspKoMat = mspKoMat[,colnames(mspKoMat) %in% koTermsNew]
use_data(mspKoMat, koDescMap, gutTaxoTab, internal=T, overwrite = T)
document()
save(koDescMap, file="./data/koDescMap.RData")
koDescMap[1:3,]
save(koDescMap, file="./data/koDescMap.RData")
save(gutTaxoTab, file="./data/gutTaxoTab.RData")
save(mspKoMat, file="./data/mspKoMat.RData")
document()
roxygenise()
head(koDescMap)
save(koDescMap, file="./data/koDescMap.Rda")
save(gutTaxoTab, file="./data/gutTaxoTab.Rda")
save(mspKoMat, file="./data/mspKoMat.Rda")
document()
save(koDescMap, gutTaxoTab, mspKoMat, file="./data/example.RData")
document()
document()
document()
roxygenise()
build()
document()
roxygenise()
jacc <- function(x,y) {
prod = sum(x*y)
sumx = sum(x)
sumy = sum(y)
uni  = sumx + sumy - prod
return(prod/uni)
}
jacc_comp = compiler::cmpfun(jacc)
copyLowerToUpper <- function(m) {
m[lower.tri(m)] <- t(m)[lower.tri(m)]
return(m)
}
copyLowerToUpper_comp = compiler::cmpfun(copyLowerToUpper)
getJaccMat <- function(mat) {
jaccMat = matrix(0,dim(mat)[2],dim(mat)[2])
rownames(jaccMat) = colnames(mat)
colnames(jaccMat) = colnames(mat)
combs = t(combn(ncol(mat),2))
jaccs = apply(combs, 1, function(x) jacc_comp(mat[,x[1]], mat[,x[2]]))
jaccMat[combs]=jaccs
diag(jaccMat)=1
jaccMat = copyLowerToUpper_comp(jaccMat)
return(jaccMat)
}
makeJaccNet <- function(jaccMat, cutJacc = 0.5) {
jaccElementsAll = rownames(jaccMat)
jaccTable = reshape2::melt(jaccMat)
jaccTable = jaccTable[jaccTable[,3] >= cutJacc & jaccTable[,1] != jaccTable[,2], ]
jaccTable[,1]=as.character(jaccTable[,1])
jaccTable[,2]=as.character(jaccTable[,2])
jaccElementsLeft = unique(c(jaccTable[,1], jaccTable[,2]))
jaccElementsExcluded = jaccElementsAll[!jaccElementsAll %in% jaccElementsLeft]
jaccNet = igraph::graph.data.frame(jaccTable[,1:2], directed=F)
jaccNet = igraph::simplify(jaccNet, remove.multiple=T, remove.loops=T)
jaccNet = igraph::add_vertices(jaccNet, length(jaccElementsExcluded), attr=list(name=jaccElementsExcluded))
return(jaccNet)
}
makeModuleList <- function(corNet, debug=F) {
fc = igraph::cluster_walktrap(corNet)
cluster = fc$membership
geneCluster = data.frame(gene=V(corNet)$name,
cluster=cluster,
stringsAsFactors=F)
geneClusterList = split.data.frame(geneCluster, geneCluster$cluster)
geneClusterList = lapply(geneClusterList, "[[", "gene")
geneClusterSizes = do.call(c, lapply(geneClusterList, length))
if (debug) {
print("... done")
print(paste("... modularity:", as.character(modularity(fc))))
print(paste("... no. clusters:", as.character(length(geneClusterList))))
print(paste("... no. genes of max cluster:", as.character(sort(geneClusterSizes,T)[1])))
}
return(geneClusterList)
}
getDescFromKoTerms <- function(koTerms) {
desc = koDescMap$desc[match(koTerms, koDescMap$KO)]
return(desc)
}
getHyperP <-function( targetGenes, refGenes, allGenes, debug ) {
if (debug) {
nonExistingTargets = as.numeric(table(targetGenes %in% allGenes)["FALSE"])
print(paste("target genes not existed in reference record:", nonExistingTargets))
}
targetGenes = targetGenes[targetGenes %in% allGenes]
numAll = length(allGenes)
numOverlap = length( refGenes[refGenes %in% targetGenes] )
numTrue = length(refGenes)
numPositive = length(targetGenes)
out = 1-phyper(numOverlap-1, numTrue, numAll - numTrue, numPositive)
if (debug) {
print( "[ hyper-geom. statistics ]")
print( paste("  all items:", as.character(numAll)) )
print( paste("  all ref. items:", as.character(numTrue)) )
print( paste("  all target items:", as.character(numPositive)) )
print( paste("  all overlapped:", as.character(numOverlap)) )
print( paste("  p-value:", as.character(out)) )
}
return(out)
}
getPhylumName <- function(mgsName, taxo) {
phylum = taxo[match(mgsName, rownames(taxo)),"phylum"]
return(phylum)
}
getFamilyName <- function(mgsName, taxo) {
family = taxo[match(mgsName, rownames(taxo)),"family"]
return(family)
}
getClassName <- function(mgsName, taxo) {
class = taxo[match(mgsName, rownames(taxo)),"class"]
return(class)
}
getOrderName <- function(mgsName, taxo) {
order = taxo[match(mgsName, rownames(taxo)),"order"]
return(order)
}
getGenusName <- function(mgsName, taxo) {
genus = taxo[match(mgsName, rownames(taxo)),"genus"]
return(genus)
}
getSpeciesName <- function(mgsName, taxo) {
species = taxo[match(mgsName, rownames(taxo)),"species"]
return(species)
}
#' @export
getEnrichMentGsByGs <- function(refGeneSet, targetGeneSet, debug=F) {
allRefGenes = unique.default(do.call(c, refGeneSet))
allTargetGenes = unique.default(do.call(c, targetGeneSet))
if (debug) print(length(allRefGenes))
if (debug) print(length(allTargetGenes))
if (debug) print(table(allTargetGenes %in% allRefGenes))
hyperRes = lapply(refGeneSet, function(currRefGenes) {
hyperPs = lapply(targetGeneSet, function(currTargetGenes){
currTargetGenes = currTargetGenes[currTargetGenes %in% allRefGenes]
hyperP = getHyperP( currTargetGenes, currRefGenes, allRefGenes, F )
})
return(hyperPs)
})
out = lapply(hyperRes, function(x) return(unlist(x)))
hyperMat = do.call(cbind, out)
if (debug) print(dim(hyperMat))
return(hyperMat)
}
#' @export
getEnrichMentGsByList <- function(refGeneSet, targetGenes, debug=F) {
allRefGenes = unique.default(do.call(c, refGeneSet))
if (debug) print(table(targetGenes %in% allRefGenes))
targetGenes = targetGenes[targetGenes %in% allRefGenes]
hyperPs = lapply(refGeneSet, function(currRefGenes) {
hyperP = getHyperP( targetGenes, currRefGenes, allRefGenes, F )
return(hyperP)
})
hyperPs = unlist(hyperPs, use.names = F)
names(hyperPs) = names(refGeneSet)
return(hyperPs)
}
#' @export
makeFuncCluster <- function(mspKoMat) {
mspKoJaccMat =  getJaccMat(mspKoMat)
mspKoJaccNet = makeJaccNet(mspKoJaccMat)
mspKoModules = makeModuleList(mspKoJaccNet)
return(mspKoModules)
}
#' @export
getDescriptionOfKeggOrthologFromModules <- function(mspKoModules) {
return(lapply(mspKoModules, getDescFromKoTerms))
}
#' @export
getCoveredMspByModules <- function(mspKoModules, mspKoMat, cutRatio=0.75, debug=F) {
mspList = lapply(mspKoModules, function(currFuncs) {
lenCurrFuncs = length(currFuncs)
if (length(currFuncs)==1) {
currMspsByFuncs = mspKoMat[,currFuncs]
} else {
currMspsByFuncs = rowSums(mspKoMat[,currFuncs])
}
currMspsByFuncs = sort(currMspsByFuncs, decreasing = T)
currMspsByFuncs = currMspsByFuncs[currMspsByFuncs>=(lenCurrFuncs*cutRatio)]
return(names(currMspsByFuncs))
})
mspTab =  melt(mspList)[,c(2,1)]
colnames(mspTab) = c("Cluster", "MSP")
mspTab$species = getSpeciesName(mspTab$MSP, gutTaxo)
return(mspTab)
}
### printing out something during installation ###
#mspKoModules = makeFuncCluster(mspKoMat)
#mspKoDescModules = getDescriptionOfKeggOrthologFromModules(mspKoModules)
#mspByModuleTab = getCoveredMspByModules(mspKoModules, mspKoMat)
#set.seed(1)
#koTermsNew = koTerms[sample(1:length(koTerms), 200)]
#mspKoMat = mspKoMat[,colnames(mspKoMat) %in% koTermsNew]
#use_data(mspKoMat, koDescMap, gutTaxoTab, internal=T, overwrite = T)
#system.file("")
#print("123")
# save(koDescMap, gutTaxoTab, mspKoMat, file="./data/example.RData")
# save(koDescMap, file="./data/koDescMap.RData")
# save(gutTaxoTab, file="./data/gutTaxoTab.RData")
# save(mspKoMat, file="./data/mspKoMat.Rda")
document()
q()
funcModulesRData = "J:\\Deposit\\Project\\2018_microbiome_atlas\\functional.annotation//funcModules.20191227.RData"
load(funcModulesRData)
gutTaxoRData = "J:\\Deposit\\Project\\2018_microbiome_atlas\\gutTaxo.RData"
load(gutTaxoRData)
dim(gutTaxo)
colnames(gutTaxo)
gutTaxoTab = gutTaxoTab[,c("MSP","size","speices", "genus", "family","order","class","phylum","superkingdom")]
gutTaxoTab = gutTaxo[,c("MSP","size","speices", "genus", "family","order","class","phylum","superkingdom")]
class(gutTaxo)
gutTaxoTab = gutTaxo[,c("MSP","size","species", "genus", "family","order","class","phylum","superkingdom")]
??markovchainFit
install.packages("markovchain")
require(markovchain)
load(wellnessRData)
wellnessRData = "C://Data//comparative.analysis.healthy.sweden//wellness.output.RData"
load(wellnessRData)
wellnessMgsMat[1:3,1:3]
wellnessMetadata[1:3,1:3]
colnames(wellnessMetadata)
metaTab = wellnessMetadata
metaTab = metaTab[,c("sample.ID", "metadata.ID")]
View(metaTab)
require(devtools)
require(roxygen2)
document()
document
document()

